'use client'                              // 1Ô∏è‚É£ Indica que este componente roda no cliente (navegador), necess√°rio no App Router

import { useState } from 'react'         // 2Ô∏è‚É£ Importa o ‚Äúgancho‚Äù useState do React para gerenciar estado local

// 3Ô∏è‚É£ Componente padr√£o exportado, que representa a p√°gina inicial ‚Äú/‚Äù
export default function Home() {
  // 4Ô∏è‚É£ Cria uma vari√°vel de estado 'description' e sua fun√ß√£o para atualizar 'setDescription'
  const [description, setDescription] = useState('')  
  // 5Ô∏è‚É£ Cria uma vari√°vel de estado 'email' e sua fun√ß√£o para atualizar 'setEmail'
  const [email, setEmail] = useState('')

  // 6Ô∏è‚É£ Fun√ß√£o que lida com o envio do formul√°rio
  function handleSubmit(e) {
    e.preventDefault()                    // 7Ô∏è‚É£ Impede o comportamento padr√£o de recarregar a p√°gina
    // 8Ô∏è‚É£ Exibe um alerta apenas para confirmar que recebemos os valores corretamente
    alert(`Descri√ß√£o: ${description}\nE-mail: ${email}`)
  }

  // 9Ô∏è‚É£ JSX retornado: define a interface que ser√° renderizada no navegador
  return (
    // üîü Container principal centralizado e com padding (usando classes do Tailwind)
    <main className="max-w-xl mx-auto p-6">
      {/* 1Ô∏è‚É£1Ô∏è‚É£ T√≠tulo principal */}
      <h1 className="text-2xl font-bold mb-4">AI Traffic Scout</h1>
      {/* 1Ô∏è‚É£2Ô∏è‚É£ Subt√≠tulo */}
      <h2 className="text-xl mb-6">Keyword Booster</h2>

      {/* 1Ô∏è‚É£3Ô∏è‚É£ Formul√°rio: chama handleSubmit ao enviar */}
      <form onSubmit={handleSubmit} className="space-y-4">
        {/* 1Ô∏è‚É£4Ô∏è‚É£ Campo Descri√ß√£o */}
        <div>
          <label htmlFor="description" className="block mb-1">
            Descri√ß√£o
          </label>
          {/* textarea controlado pelo React (value + onChange) */}
          <textarea
            id="description"
            value={description}                       // 1Ô∏è‚É£5Ô∏è‚É£ Liga o conte√∫do do textarea ao estado 'description'
            onChange={e => setDescription(e.target.value)} // 1Ô∏è‚É£6Ô∏è‚É£ Atualiza o estado sempre que o usu√°rio digita
            rows={4}
            className="w-full border px-2 py-1"       // 1Ô∏è‚É£7Ô∏è‚É£ Estilo b√°sico com Tailwind: largura total, borda e padding
            placeholder="Descreva seu produto ou nicho‚Ä¶"
            required                                 // 1Ô∏è‚É£8Ô∏è‚É£ Garante que o campo n√£o possa ficar vazio
          />
        </div>

        {/* 1Ô∏è‚É£9Ô∏è‚É£ Campo E-mail */}
        <div>
          <label htmlFor="email" className="block mb-1">
            E-mail
          </label>
          {/* input controlado para capturar o e-mail */}
          <input
            id="email"
            type="email"                             // 2Ô∏è‚É£0Ô∏è‚É£ Tipo 'email' ativa valida√ß√£o nativa do navegador
            value={email}                            // 2Ô∏è‚É£1Ô∏è‚É£ Liga o conte√∫do do input ao estado 'email'
            onChange={e => setEmail(e.target.value)} // 2Ô∏è‚É£2Ô∏è‚É£ Atualiza o estado ao digitar
            className="w-full border px-2 py-1"
            placeholder="seu@email.com"
            required
          />
        </div>

        {/* 2Ô∏è‚É£3Ô∏è‚É£ Bot√£o de envio */}
        <button
          type="submit"                              // 2Ô∏è‚É£4Ô∏è‚É£ Define este elemento como o bot√£o que envia o form
          className="bg-blue-600 text-white px-4 py-2 rounded"
        >
          Gerar keywords
        </button>
      </form>
    </main>
  )
}
